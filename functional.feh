class List {
	array ARRAY;
	
	function constructor (array a) {
		.ARRAY = a;
	}
	
	function constructor () {
		.ARRAY = [];
	}
	
	static function create (array a) {
		return new List(a);
	}
	
	function push (void i) {
		return .ARRAY.push(i);
	}
	
	function unshift (void i) {
		return .ARRAY.unshift(i);
	}
	
	function shift () {
		return .ARRAY.shift();
	}
	
	function pop () {
		return .ARRAY.pop();
	}
	
	function size () {
		return .ARRAY.size();
	}
	
	function join (string j) {
		return .ARRAY.join(j);
	}
	
	function map () {
		object f = recipient();
		if (f) {
			object result = new List();
			for (number i=0;i<.ARRAY.size();i++) {
				result.push(f.invoke(.ARRAY[i]));
			}
			return result;
		}
	}
	
	function fold () {
		object f = recipient();
		if (f) {
			void result;
			for (number i=0;i<.ARRAY.size();i++) {
				result = f.invoke(result,.ARRAY[i]);
			}
			return result;
		}
	}
	
	function fold_r () {
		object f = recipient();
		if (f) {
			void result;
			for (number i = .ARRAY.size()-1; i >= 0; i--) {
				result = f.invoke(result,.ARRAY[i]);
			}
			return result;
		}
	}
	
	function zip (void b) {
		object f = recipient();
		if (f) {
			object result = new List();
			while (.size() && b.size()) {
				result.push(f.invoke(.shift(),b.shift()));
			}
			return result;
		}
	}
	
	function stride (number stride_amount) {
		object f = recipient();
		if (f) {
			object result = new List();
			array values;
			while (.size() >= stride_amount) {
				values = [];
				for (number i=0;i<stride_amount;i++) {
					values.push(.shift());
				}
				result.push(f.invoke(values));
			}
			return result;
		}
	}
	
	function filter () {
		object f = recipient();
		if (f) {
			object result = new List();
			for (number i=0;i<.ARRAY.size();i++) {
				if (f.invoke(.ARRAY[i])) result.push(.ARRAY[i]);
			}
			return result;
		}
	}
	
	function toString return '' + .ARRAY;
	
	function toJSON return .ARRAY.toJSON();
	
	function toArray return .ARRAY;
}
